apiVersion: apps/v1
kind: Deployment # replicaset을 관리한다. (pod를 여러개 가짐) - 
metadata:
  name: client-app # Deployment의 이름 -> 의미있게
  namespace: team-6
spec: # Deployment의 spec
  replicas: 1 # 프론트 -> 하나만 - pod를 하나만 띄우는 것
  selector:
    matchLabels: # 위의 metadata와 매치 시켜주는 것
      app: client-app
  template: # 여러개를 만들 수 있는 하나의 틀 -> template - pod의 템플릿 - replicaset은 pod를 여러개 띄운다(보통 같은 것)
    metadata:
      labels: # 이런 이름으로 붙여준다.
        app: client-app
    spec: # 여기서 부터 중요 - pod의 spec - namespace로 자원을 분류한 상태인데 -> 여기서 각자 배정한 노드에 우리의 서비스를 배포해야한다.
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution: # 엄격하게 지켜야하는 사항ㄷ
            nodeSelectorTerms: # node를 선택
            - matchExpressions:
              - key: alpha.eksctl.io/nodegroup-name
                operator: In
                values: # node group에 배포하기 위해서 설정 -> 6조 - ng-6 -> 배포할때 설정해야한다.
                - ng-6      
      containers: # pod다. 컨테이너에 대한 정보
      - name: client-app
        image: 686710509719.dkr.ecr.ap-northeast-2.amazonaws.com/team-6:front-20231019165038 # ecr주소:team-6뒤에는이미지 이름
        imagePullPolicy: IfNotPresent
        resources:
          requests: # 컨테이너가 어떤 자원을 가지는지 설정 -> 필요한대로 설정하기
            cpu: "100m"
            memory: "128Mi"
        ports: # 컨테이너가 갖는 포트 - 컨테이너가 사용할 포트번호
        - containerPort: 3000